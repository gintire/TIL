package com.gintire.test.domain;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Player} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractPlayerAssert<S extends AbstractPlayerAssert<S, A>, A extends Player> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractPlayerAssert}</code> to make assertions on actual Player.
   * @param actual the Player we want to make assertions on.
   */
  protected AbstractPlayerAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Player's name is equal to the given one.
   * @param name the given name to compare the actual Player's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's name is not equal to the given one.
   */
  public S hasName(String name) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.getName();
    if (!Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's team is equal to the given one.
   * @param team the given team to compare the actual Player's team to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's team is not equal to the given one.
   */
  public S hasTeam(String team) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting team of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTeam = actual.getTeam();
    if (!Objects.areEqual(actualTeam, team)) {
      failWithMessage(assertjErrorMessage, actual, team, actualTeam);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's teamMates contains the given String elements.
   * @param teamMates the given elements that should be contained in actual Player's teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates does not contain all given String elements.
   */
  public S hasTeamMates(String... teamMates) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (teamMates == null) failWithMessage("Expecting teamMates parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTeamMates(), teamMates);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's teamMates contains the given String elements in Collection.
   * @param teamMates the given elements that should be contained in actual Player's teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates does not contain all given String elements.
   */
  public S hasTeamMates(java.util.Collection<? extends String> teamMates) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (teamMates == null) {
      failWithMessage("Expecting teamMates parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getTeamMates(), teamMates.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's teamMates contains <b>only</b> the given String elements and nothing else in whatever order.
   * @param teamMates the given elements that should be contained in actual Player's teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates does not contain all given String elements.
   */
  public S hasOnlyTeamMates(String... teamMates) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (teamMates == null) failWithMessage("Expecting teamMates parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTeamMates(), teamMates);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's teamMates contains <b>only</b> the given String elements in Collection and nothing else in whatever order.
   * @param teamMates the given elements that should be contained in actual Player's teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates does not contain all given String elements.
   */
  public S hasOnlyTeamMates(java.util.Collection<? extends String> teamMates) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (teamMates == null) {
      failWithMessage("Expecting teamMates parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getTeamMates(), teamMates.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's teamMates does not contain the given String elements.
   *
   * @param teamMates the given elements that should not be in actual Player's teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates contains any given String elements.
   */
  public S doesNotHaveTeamMates(String... teamMates) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (teamMates == null) failWithMessage("Expecting teamMates parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTeamMates(), teamMates);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player's teamMates does not contain the given String elements in Collection.
   *
   * @param teamMates the given elements that should not be in actual Player's teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates contains any given String elements.
   */
  public S doesNotHaveTeamMates(java.util.Collection<? extends String> teamMates) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given String collection is not null.
    if (teamMates == null) {
      failWithMessage("Expecting teamMates parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getTeamMates(), teamMates.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Player has no teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates is not empty.
   */
  public S hasNoTeamMates() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have teamMates but had :\n  <%s>";

    // check
    if (actual.getTeamMates().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getTeamMates());
    }

    // return the current assertion for method chaining
    return myself;
  }


}
